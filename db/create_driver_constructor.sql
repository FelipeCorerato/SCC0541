-- =============================================
-- FUNÇÕES PARA CADASTRO DE ESCUDERIA
-- =============================================

-- Alterando a lógica do id original para sguir como serial
ALTER TABLE constructors
ALTER COLUMN constructorid ADD GENERATED BY DEFAULT AS IDENTITY;

SELECT setval('constructors_constructorid_seq', (SELECT MAX(constructorid) FROM constructors));

-- =============================================

CREATE OR REPLACE FUNCTION fn_create_constructor(
    p_name VARCHAR,
    p_nationality VARCHAR,
    p_url VARCHAR
)
RETURNS VOID AS $$
DECLARE
    v_constructor_ref VARCHAR;
BEGIN
    v_constructor_ref := LOWER(REPLACE(p_name, ' ', '_'));
    INSERT INTO Constructors (constructorref, name, nationality, url)
    VALUES (
        v_constructor_ref,
        p_name,
        p_nationality,
        p_url
    );
END;
$$ LANGUAGE plpgsql;


-- =============================================
-- FUNÇÕES PARA CADASTRO DE PILOTO
-- =============================================

-- Alterando a lógica do id original para sguir como serial
ALTER TABLE driver
ALTER COLUMN driverid ADD GENERATED BY DEFAULT AS IDENTITY;

SELECT setval('driver_driverid_seq', (SELECT MAX(driverid) FROM driver));

-- =============================================
-- Função para admin cadastrar piloto individualmente 
CREATE OR REPLACE FUNCTION fn_create_driver(
	p_number INTEGER,
	p_code TEXT,
	p_forename TEXT,
	p_surname TEXT,
	p_dob DATE,
    p_nationality TEXT,
    p_url TEXT
)
RETURNS VOID AS $$
DECLARE
    v_driver_ref VARCHAR;
BEGIN
    v_driver_ref := LOWER(REPLACE(p_surname, ' ', '_'));
    INSERT INTO Driver (driver_ref, number, code, forename, surname, dob, nationality, url)
    VALUES (
        v_driver_ref,
        p_number,
		p_code,
		p_forename,
		p_surname,
		p_dob,
   		p_nationality,
   		p_url
    );
END;
$$ LANGUAGE plpgsql;

-- =============================================
-- função para escuderia cadastrar pilotos via csv
CREATE OR REPLACE FUNCTION fn_create_drivers_from_csv(p_filepath TEXT)
RETURNS VOID AS $$
DECLARE
    rec RECORD;
    piloto_existente BOOLEAN;
BEGIN
    -- Cria tabela temporária para leitura dos dados
    CREATE TEMP TABLE tmp_driver_import (
        driver_ref TEXT,
        number INTEGER,
        code TEXT,
        forename TEXT,
        surname TEXT,
        dob DATE,
        nationality TEXT,
        url TEXT
    ) ON COMMIT DROP;

    -- Carrega os dados do CSV
    EXECUTE format('COPY tmp_driver_import FROM %L WITH CSV HEADER', p_filepath);

    -- Itera sobre os registros importados
    FOR rec IN SELECT * FROM tmp_driver_import LOOP
        -- Verifica se já existe piloto com mesmo nome e sobrenome
        SELECT EXISTS (
            SELECT 1
            FROM driver
            WHERE LOWER(forename) = LOWER(rec.forename)
              AND LOWER(surname) = LOWER(rec.surname)
        ) INTO piloto_existente;

        IF NOT piloto_existente THEN
            -- Gera driver_ref caso não tenha vindo no CSV
            IF rec.driver_ref IS NULL THEN
                rec.driver_ref := LOWER(REPLACE(rec.surname, ' ', '_'));
            END IF;

            INSERT INTO driver (driver_ref, number, code, forename, surname, dob, nationality, url)
            VALUES (
                rec.driver_ref,
                rec.number,
                rec.code,
                rec.forename,
                rec.surname,
                rec.dob,
                rec.nationality,
                rec.url
            );

            RAISE NOTICE 'Piloto % % inserido com sucesso.', rec.forename, rec.surname;
        ELSE
            RAISE NOTICE 'Piloto % % já existe. Inserção ignorada.', rec.forename, rec.surname;
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;
